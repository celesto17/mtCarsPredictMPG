dim (trainingDataSet)
dim (testingDataSet)
set.seed(1234)
trainingDataPartition <- createDataPartition(trainingDataSet$classe, p = 0.7, list = FALSE)
library(caret)
trainingDataPartition <- createDataPartition(trainingDataSet$classe, p = 0.7, list = FALSE)
trainingDataSet <- trainingDataSet [trainingDataPartition, ]
testingDataSet <- trainingDataSet [-trainingDataPartition, ]
nearZeroVariance <- nearZeroVariance(trainingDataSet)
library(caret)
nearZeroVariance <- nearZeroVariance(trainingDataSet)
nearZeroVar()
nearZeroVariance <- nzv(trainingDataSet)
trainingDataSet <- trainingDataSet [, nearZeroVariance]
testingDataSet <- trainingDataSet [, -nearZeroVariance]
dim(trainingDataSet)
set.seed(1234)
decisionTreeMod1 <- rpart (classe ~ ., data = trainingDataSet, method="class")
fancyRpartPlot(decisionTreeMod1)
install.packages("rpart")
install.packages("rpart")
library(rpart)
predictionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
dim (trainingDataSet)
# Load and clean dataset
trainingDataSet<- read.csv("./downloadedDataset/pml-training.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
testingDataSet<- read.csv("./downloadedDataset/pml-testing.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
dim (trainingDataSet)
dim (testingDataSet)
# Remove columns with large number of missing values
trainingDataSet <- trainingDataSet[,(colSums(is.na(trainingDataSet)) == 0)]
testingDataSet <- testingDataSet[,(colSums(is.na(testingDataSet)) == 0)]
dim (trainingDataSet)
dim (testingDataSet)
# Partition dataset for training and testing
trainingDataPartition <- createDataPartition(trainingDataSet$classe, p = 0.7, list = FALSE)
trainingDataSet <- trainingDataSet [trainingDataPartition, ]
testingDataSet <- trainingDataSet [-trainingDataPartition, ]
set.seed(1234)
predictionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
fancyRpartPlot(predictionTreeModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(predictionTreeModel)
library(rpart)
fancyRpartPlot(predictionTreeModel)
install.packages("rpart.plot")
?install.packages
install.packages("https://cran.r-project.org/bin/windows/contrib/3.6/rpart.plot_2.2.0.zip", repos=NULL, type='source')
fancyRpartPlot(predictionTreeModel)
install.packages("https://cran.r-project.org/bin/windows/contrib/3.4/rpart.plot_3.0.0.zip", repos=NULL, type='source')
pkgURL <- "https://cran.r-project.org/bin/windows/contrib/3.4/rpart.plot_3.0.0.zip"
install.packages(pkgURL, repos=NULL, type='source')
library("rpart.plot")
install.packages("rapart.plot")
install.packages("rpart.plot")
install.packages("GTK+")
install.packages("rpart.plot", dependencies = TRUE)
library(rpart.plot)
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
# Validate decision tree model on test data
predictTreeModel <- predict (decisionTreeModel, testingDataSet, type = "class")
confMatrix <- confusionMatrix(predictTreeMod1, testData$classe)
confMatrix
library(caret)
confMatrix <- confusionMatrix(predictTreeMod1, testData$classe)
confMatrix <- confusionMatrix(predictTreeModel, testData$classe)
confMatrix <- confusionMatrix(predictTreeModel, testingDataSet$classe)
confMatrix
plot(confMatrix$table, col = confMatrix$byClass,  main = paste("Decision Tree - Accuracy =", round(confMatrix$overall['Accuracy'], 4)
plot (confMatrix$table, col = confMatrix$byClass,  main = paste("Decision Tree - Accuracy =", round(confMatrix$overall['Accuracy'], 4)))
controlRF <- trainControl (method="cv", number=3, verboseIter=FALSE)
modRF1 <- train(classe ~ ., data=trainingDataSet, method="rf", trControl=controlRF)
modRF1$finalModel
modRF1 <- train(classe ~ ., data=trainingDataSet, method="rf", trControl=controlRF)
modRF1$finalModel
modRF1 <- train(classe ~ ., data=trainingDataSet, method="rf", trControl=controlRF)
modRF1$finalModel
predictRandomForest <- predict(modRF1, newdata=testingDataSet)
confMatrixRF <- confusionMatrix (predictRandomForest, testingDataSet$classe)
confMatrixRF
plot(modRF1)
plot(confMatrixRF$table, col = confMatrixRF$byClass, main = paste("Random Forest Confusion Matrix: Accuracy =", round(confMatrixRF$overall['Accuracy'], 4)))
testingDataSet <- read.csv("./downloadedDataset/pml-testing.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
testingDataSet <- testingDataSet[,(colSums(is.na(testingDataSet)) == 0)]
finalResults <- predict (modRF1, newdata = testingDataSet)
finalResults
nearZeroVar()
nzv <- nearZeroVar(trainingDataSet,saveMetrics=TRUE)
# Load and clean dataset
trainingDataSet <- read.csv("./downloadedDataset/pml-training.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
testingDataSet <- read.csv("./downloadedDataset/pml-testing.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
dim (trainingDataSet)
dim (testingDataSet)
# Remove columns with large number of missing values
trainingDataSet <- trainingDataSet[,(colSums(is.na(trainingDataSet)) == 0)]
testingDataSet <- testingDataSet[,(colSums(is.na(testingDataSet)) == 0)]
dim (trainingDataSet)
dim (testingDataSet)
# Remove first 7 columns having no significance
trainingDataSet <- trainingDataSet [, -c(1:7)]
testingDataSet <- testingDataSet [, -c(1:7)]
dim (trainingDataSet)
dim (validationDataSet)
dim (trainingDataSet)
dim (testingDataSet)
trainingDataPartition <- createDataPartition (trainingDataSet$classe, p = 0.7, list = FALSE)
trainingDataSet <- trainingDataSet [trainingDataPartition, ]
validationDataSet <- trainingDataSet [-trainingDataPartition, ]
dim (trainingDataSet)
dim (validationDataSet)
NZV <- nearZeroVar (trainingDataSet)
trainingDataSet <- trainingDataSet [, -NZV]
validationDataSet  <- validationDataSet[, -NZV]
dim (trainingDataSet)
dim (validationDataSet)
set.seed(1234)
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
library(rpart)
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
library(rpart)
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
predictTreeModel <- predict (decisionTreeModel, validationDataSet, type = "class")
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
dim (trainingDataSet)
NZV
# Load and clean dataset
trainingDataSet <- read.csv("./downloadedDataset/pml-training.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
testingDataSet <- read.csv("./downloadedDataset/pml-testing.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
dim (trainingDataSet)
dim (testingDataSet)
# Remove columns with large number of missing values
trainingDataSet <- trainingDataSet[,(colSums(is.na(trainingDataSet)) == 0)]
testingDataSet <- testingDataSet[,(colSums(is.na(testingDataSet)) == 0)]
dim (trainingDataSet)
dim (testingDataSet)
# Remove first 7 columns having no significance
trainingDataSet <- trainingDataSet [, -c(1:7)]
testingDataSet <- testingDataSet [, -c(1:7)]
dim (trainingDataSet)
dim (testingDataSet)
NZV <- nearZeroVar (trainingDataSet, saveMetrics=TRUE)
trainingDataSet <- trainingDataSet [, NZV$nzv==FALSE]
NZV <- nearZeroVar (validationDataSet, saveMetrics=TRUE)
validationDataSet  <- validationDataSet[, NZV$nzv==FALSE]
dim (trainingDataSet)
dim (validationDataSet)
NZV <- nearZeroVar (validationDataSet, saveMetrics=TRUE)
testingDataSet  <- testingDataSet[, NZV$nzv==FALSE]
dim (trainingDataSet)
dim (testingDataSet)
# Load and clean dataset
trainingDataSet <- read.csv("./downloadedDataset/pml-training.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
testingDataSet <- read.csv("./downloadedDataset/pml-testing.csv", sep=",", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
dim (trainingDataSet)
dim (testingDataSet)
# Remove columns with large number of missing values
trainingDataSet <- trainingDataSet[,(colSums(is.na(trainingDataSet)) == 0)]
testingDataSet <- testingDataSet[,(colSums(is.na(testingDataSet)) == 0)]
dim (trainingDataSet)
dim (testingDataSet)
# Remove first 7 columns having no significance
trainingDataSet <- trainingDataSet [, -c(1:7)]
testingDataSet <- testingDataSet [, -c(1:7)]
dim (trainingDataSet)
dim (testingDataSet)
NZV <- nearZeroVar (trainingDataSet, saveMetrics=TRUE)
trainingDataSet <- trainingDataSet [, NZV$nzv==FALSE]
NZV <- nearZeroVar (testingDataSet, saveMetrics=TRUE)
testingDataSet  <- testingDataSet[, NZV$nzv==FALSE]
dim (trainingDataSet)
dim (testingDataSet)
trainingDataPartition <- createDataPartition (trainingDataSet$classe, p = 0.7, list = FALSE)
trainingDataSet <- trainingDataSet [trainingDataPartition, ]
validationDataSet <- trainingDataSet [-trainingDataPartition, ]
dim (trainingDataSet)
dim (validationDataSet)
set.seed(1234)
decisionTreeModel <- rpart (classe ~ ., data = trainingDataSet, method="class")
predictTreeModel <- predict (decisionTreeModel, validationDataSet, type = "class")
confMatrixTM <- confusionMatrix (predictTreeModel, validationDataSet$classe)
confMatrixTM
controlRF <- trainControl (method="cv", number=3, verboseIter=FALSE)
modRF1 <- train(classe ~ ., data=trainingDataSet, method="rf", trControl=controlRF)
modRF1$finalModel
predictRandomForest <- predict(modRF1, newdata=validationDataSet)
confMatrixRF <- confusionMatrix (predictRandomForest, validationDataSet$classe)
confMatrixRF
finalResults <- predict (modRF1, newdata = testingDataSet)
finalResults
set.seed(12345)
controlGBM <- trainControl (method = "repeatedcv", number = 5, repeats = 1)
GBMModel  <- train (classe ~ ., data = trainingDataSet, method = "gbm", trControl = controlGBM, verbose = FALSE)
GBMModel$finalModel
print(GBMModel)
predictGBM <- predict (GBMModel, newdata = testingDataSet)
confMatrixGBM <- confusionMatrix(predictGBM, testData$classe)
confMatrixGBM <- confusionMatrix(predictGBM, testingDataSet$classe)
predictGBM <- predict (GBMModel, newdata = testingDataSet)
confMatrixGBM <- confusionMatrix(predictGBM, testingDataSet$classe)
predictGBM <- predict (GBMModel, newdata = validationDataSet)
confMatrixGBM <- confusionMatrix(predictGBM, validationDataSet$classe)
confMatrixGBM
finalResults <- predict (randomForestModel, newdata = testingDataSet)
cat("Training dataset : ", + dim (trainingDataSet)
cat("Training dataset : ", + dim (trainingDataSet))
cat("Training dataset: ", dim (trainingDataSet), "Testing dataset: ", dim (testingDataSet), "")
printLine <- cat("Training dataset: ", dim (trainingDataSet), "Testing dataset: ", dim (testingDataSet))
print (printLine)
printLine
fancyRpartPlot(decisionTreeModel)
install.packages("fancyRpartPlot", dependencies = TRUE)
finalResults
q()
version(rpart)
library(ElemStatLearn)
install.packages("library(ElemStatLearn)")
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rfvowel <- train(y ~ ., vowel.train, method = "rf")
predrf <- predict(rfvowel, newdata = vowel.test)
confusionMatrix(predrf, vowel.test$y)
gbmvowel <- train(y ~ ., vowel.train, method = "gbm", verbose = FALSE)
modelagreed <- (predrf == predgbm)
predgbm <- predict(gbmvowel, vowel.test)
modelagreed <- (predrf == predgbm)
confusionMatrix(vowel.test$y[modelagreed], predrf[modelagreed])$overall['Accuracy']
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433 )
library(AppliedPredictiveModeling)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(lubridate)
install.packages("leaflets")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
installed.packages("plotly")
install.packages("plotly")
install.packages("shiny")
shiny::runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
load(mtcars)
mtcars
str(mtcars)
summary (mtcars)
data.frame(mtcars)
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$wt <- as.factor(mtcars$wt)
mtcars$hp <- as.factor(mtcars$hp)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$gear <- as.factor(mtcars$gear)
str(mtcars)
model <- lm (mpg ~ . ,  data=mtcars)
model
best_model <- step (model, direction = "both")
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$wt <- as.factor(mtcars$wt)
mtcars$hp <- as.factor(mtcars$hp)
str(mtcars)
model <- lm (mpg ~ . ,  data=mtcars)
best_model <- step (model, direction = "both")
summary(model)
data <- mtcars[,c("mpg","disp","hp","wt")]
head(data)
Model1_LM <- lm(mpg ~ ., data = data)
summary(Model1_LM)
fit1_LM <- stepAIC(Model1_LM, direction = 'backward')
require(MASS)
fit1_LM <- stepAIC(Model1_LM, direction = 'backward')
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$wt <- as.factor(mtcars$wt)
mtcars$hp <- as.factor(mtcars$hp)
str(mtcars)
model <- lm (mpg ~ . ,  data=mtcars)
require(MASS)
best_model <- step (model, direction = "both")
fit1_LM <- step (Model1_LM, direction = 'both')
best_model <- step (model, direction = 'both')
data <- mtcars[ , c ("am", "cyl", "wt", "hp")]
head(data)
data <- mtcars[ , c ("mpg", "am", "cyl", "wt", "hp")]
head(data)
Model1_LM <- lm(mpg ~ ., data = data)
summary(Model1_LM)
require(MASS)
fit1_LM <- stepAIC(Model1_LM, direction = 'backward')
fit1_LM <- step (Model1_LM, direction = 'both')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
data <- mtcars[ , c ("am", "cyl", "wt", "hp")]
head(data)
Model1_LM <- lm (mpg ~ ., data = data)
summary (Model1_LM)
require (MASS)
fit1_LM <- step (Model1_LM, direction = 'both')
fit1_LM <- step (Model1_LM, direction = 'both')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
myp
data <- mtcars[ , c ("mpg", "am", "cyl", "wt", "hp")]
head(data)
Model1_LM <- lm (mpg ~ ., data = data)
summary (Model1_LM)
require (MASS)
fit1_LM <- step (Model1_LM, direction = 'both')
newdata = data.frame (am = input$Trans, cyl = input$Cyl, wt = input$Weight, hp=input$HP)
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
newdata = data.frame (am = 1, cyl = 4, wt = 2, hp=80)
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata = data.frame (am = "1", cyl = "4", wt = "2", hp="80")
myp  <- predict (Model1_LM, newdata , interval = "predict")
data <- mtcars[ , c ("mpg", "am", "cyl", "wt", "hp")]
head(data)
Model1_LM <- lm (mpg ~ ., data = data)
summary (Model1_LM)
require (MASS)
fit1_LM <- step (Model1_LM, direction = 'both')
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata = data.frame(am = "1", cyl = "4", wt = "2", hp="80")
newdata
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata <- data.frame(am = "1", cyl = "4", wt = "2", hp="80")
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata <- data.frame(am = "1", cyl = "4")
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata <- data.frame(am = "1", cyl = "4", wt = "2.2", hp="80")
myp  <- predict (Model1_LM, newdata , interval = "predict")
newdata <- data.frame(am = "1", cyl = "4", wt = "2.2", hp="110")
myp  <- predict (Model1_LM, newdata , interval = "predict")
data
summary (data)
str(mtcars)
model <- lm (mpg ~ . ,  data=mtcars)
best_model <- step (model, direction = "both")
mtcars$am <- as.factor(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$wt <- as.factor(mtcars$wt)
mtcars$hp <- as.factor(mtcars$hp)
model <- lm (mpg ~ . ,  data=mtcars)
best_model <- step (model, direction = "both")
shiny::runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
model <- lm (mpg ~ . ,  data=mtcars)
head(mtcars)
newdata <- data.frame(am=1, cyl=6, wt=2.875, hp=110)
myp <- predict(model, newdata, interval = "predict")
predVal <- predict(fit, newdata=data.frame(wt=3))
predVal <- predict(model, newdata=data.frame(wt=3))
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
str(mtcars)
model <- lm (mtcars$mpg ~ am + cyl + wt + hp,  data=mtcars)
summary(model)
newdata <- data.frame(am=1, cyl=6, wt=2.875, hp=110)
model <- lm (mtcars$mpg ~ am + cyl + wt + hp,  data=mtcars)
predVal <- predict(model, newdata=data.frame(wt=3))
fit <- lm(mpg~wt, data=mtcars)
predVal <- predict(fit, newdata=data.frame(wt=3000))
predVal <- predict(fit, newdata=data.frame(wt="3000""))
predVal <- predict(fit, newdata=data.frame(wt="3000))
predVal <- predict(fit, newdata=data.frame(wt="3000"))
predVal <- predict(fit, newdata=data.frame(wt="2100"))
predVal <- predict(fit, newdata=data.frame(wt="2.62"))
newdata <- data.frame(am="1", cyl="6", wt="2.875", hp="110")
model <- lm (mtcars$mpg ~ am + cyl + wt + hp,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
model <- lm (mtcars$mpg ~ am + cyl + wt + hp,  data=mtcars)
model <- lm (mtcars$mpg ~ am,  data=mtcars)
newdata <- data.frame(am="1", cyl="6", wt="2.875", hp="110")
newdata <- data.frame(am="1")
myp <- predict(model, newdata, interval = "predict")
model <- lm (mtcars$mpg ~ am + cyl,  data=mtcars)
newdata <- data.frame(am="1", cyl="6")
myp <- predict(model, newdata, interval = "predict")
model <- lm (mtcars$mpg ~ am + cyl + wt,  data=mtcars)
newdata <- data.frame(am="1", cyl="6", wt="2.875")
myp <- predict(model, newdata, interval = "predict")
summary (mtcars)
newdata <- data.frame(am="1", cyl="6: 7", wt="2.875")
myp <- predict(model, newdata, interval = "predict")
newdata <- data.frame(am="1", cyl="4", wt="2.875")
model <- lm (mtcars$mpg ~ am + cyl + wt,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
newdata <- data.frame(am="1", wt="2.875", hp="110")
model <- lm (mtcars$mpg ~ am + wt + hp,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
------------
newdata <- data.frame(am="1", wt="2.875")
model <- lm (mtcars$mpg ~ am + wt,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
newdata <- data.frame(am="1", cyl="6", wt="2.875", hp="110")
model <- lm (mtcars$mpg ~ am + cyl + wt + hp,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
newdata <- data.frame(am="1", cyl="6")
model <- lm (mtcars$mpg ~ am + cyl,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
newdata <- data.frame(am="1", cyl="6", wt="2.875")
model <- lm (mtcars$mpg ~ am + cyl + wt,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
ewdata <- data.frame(am="1", wt="2.875")
model <- lm (mtcars$mpg ~ am + wt,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
model <- lm (mtcars$mpg ~ .,  data=mtcars)
newdata <- data.frame(am="1", cyl="6", wt="2.875", hp="110")
myp <- predict(model, newdata, interval = "predict")
summary (mtcars)
model <- lm (mtcars$mpg ~ am+cyl+wt+hp,  data=mtcars)
myp <- predict(model, newdata, interval = "predict")
code(textOutput("myp"))
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
str(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
str(mtcars)
model <- lm(mpg ~ . ,  data=mtcars)
best_model <- step(model, direction="both")
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
model <- lm(mpg ~ . ,  data=mtcars)
best_model <- model
summary(best_model)
newdata = data.frame (wt=we(), qsec=input$Qsec, am=input$Trans)
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
newdata = data.frame (wt="3", qsec="input$Qsec"18"", am="input$Trans"1"")
newdata = data.frame (wt="3", qsec="input$Qsec"18"", am="input$Trans"1)
newdata = data.frame (wt="3", qsec="input$Qsec"18"", am="input$Trans"1"")
newdata = data.frame (wt="3", qsec="18", am="1")
myp  <- predict (best_model, newdata , interval = "predict")
newdata = data.frame (wt="3", qsec="18", am="1", cyl ="4")
myp  <- predict (best_model, newdata , interval = "predict")
model <- lm (mpg ~ am + wt + qsec + cyl,  data=mtcars)
best_model <- model
summary(best_model)
myp  <- predict (best_model, newdata , interval = "predict")
mfit = lm(mpg ~ wt + disp + cyl, data=mtcars)
summary(mfit)
predict(mfit)
newcar = data.frame(wt=4.5, disp=300, cyl=8)
newcar
predict(mfit, newcar)
str(mtcars)
rm(list=ls())
newcar
str(mtcars)
mfit = lm(mpg ~ wt + disp + cyl, data=mtcars)
predict(mfit)
newcar = data.frame(wt=4.5, disp=300, cyl=8)
newcar
predict(mfit, newcar)
myp
myp <- predict (mfit, newcar)
myp
mfit = lm(mpg ~ am + cyl + wt + hp, data=mtcars)
newcar = data.frame(am = 1, cyl=8, wt=4.5, hp = 93)
newcar
myp <- predict (mfit, newcar)
myp
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
mFit = lm (mpg ~ am + cyl + wt + hp, data=mtcars)
newCarPredictors = data.frame (am="0", cyl = "4", wt = "4", hp="80")
newCarPredictedMPG  <- predict (mFit, newCarPredictors)
str(mtcars)
newCarPredictors = data.frame (am=0, cyl = 4, wt = 4, hp=80)
newCarPredictedMPG  <- predict (mFit, newCarPredictors)
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
summary (mtcars)
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='sanjaylonkar', token='8C89BE7819AFABE110519399C550C00A', secret='gKE5eQ3tWq7sKvmYQkMjs5RN/WBymUsxfeMLFXPk')
shiny::runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
runApp('F:/01. Data Science/09. Developing Data Products/04. Week 4/08. Course Project/DevelopingDataProducts')
